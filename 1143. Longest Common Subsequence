1143. Longest Common Subsequence
Leetcode

Code:
int max(int a, int b) {
    if (a > b) {
        return a;
    } else {
        return b;
    }
}

class Solution {
public:
    int longestCommonSubsequence(string text1, string text2) {
        int n = text1.length();
        int m = text2.length();
        
        //Let dp[i][j] be the longest common subsequence using the first i characters in text1 and the first j characters in text2
        int dp[n+1][m+1];
        for (int i = 0; i <= n; i++) {
            for (int j = 0; j <= m; j++) {
                dp[i][j] = 0;
            }
        }

        //To compute dp[i][j], we can take the best answer from dp[i-1][j] and dp[i][j-1]. In addition if the ith character in the first string is equal to the 
        //jth character in the second string, we can use dp[i-1][j-1]+1 as well.
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= m; j++) {
                dp[i][j] = max(dp[i-1][j], dp[i][j-1]);
                if (text1[i-1] == text2[j-1]) {
                    dp[i][j] = max(dp[i][j], dp[i-1][j-1]+1);
                } else {
                    dp[i][j] = max(dp[i][j], dp[i-1][j-1]);
                }
            }
        }

        return dp[n][m];
    }
};
