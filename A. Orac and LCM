A. Orac and LCM
Codeforces Round #641 (Div. 1)

Code:
//#include <bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp>
//using namespace __gnu_pbds;
#include <iostream>
#include <fstream>
#include <algorithm>
#include <vector>
#include <stack>
#include <queue>
#include <math.h>
#include <set>
#include <map>
#include <string>
#include <tuple>
#include <numeric>
#include <climits>
#include <bitset>
#include <iomanip>
#include <random>
#include <ctime>

using namespace std;

//change the long long to int if you need to save memory/time really badly
typedef long long ll;

//Comment this define when working on interactive problems
#define endl "\n"
#define sqrt(n) sqrt((long double) n)

const ll MAXN = 5e5 + 5;
const ll ZER = 0;
const ll ONE = 1;
const ll INF = LLONG_MAX;
const ll MOD = 998244353;

ll min(ll a, ll b) {
    if (a < b) {
        return a;
    } else {
        return b;
    }
}
 
ll max(ll a, ll b) {
    if (a > b) {
        return a;
    } else {
        return b;
    }
}

ll mod(ll num) {
    return (num >= MOD ? num % MOD : num);
}

ll __gcd(ll a, ll b) {
    if (b == 0) {
        return a;
    }
    
    if (a == 0) {
        return b;
    }
    
    if (a < b) {
        swap(a, b);
    }
    
    return __gcd(b, a % b);
}

ll __lcm(ll a, ll b) {
    ll prod = a*b;
    return prod/__gcd(a, b);
}

//Algorithm: For each element a_i, let's compute the gcd of lcm(a_i, a_i+1), lcm(a_i, a_i+2), . . ., lcm(a_i, a_n). The answer will then be the gcd of all these gcds. If you think logically, the gcd of the lcms listed above is the same as lcm(a_i, gcd(a_i+1, a_i+2, a_i+3, . . . a_n)).
void solve(ll ca)
{
    //Read in the input
    ll n; cin >> n;
    ll x[n];
    for (ll i = 0; i < n; i++) {
        cin >> x[i];
    }
    
    //Answer gcd
    ll ans = 1;
    ll curgcd = x[n-1]; //Running suffix gcd
    
    for (ll i = n-2; i >= 0; i--) {
        //Update the grand gcd by using the lcm of the current element and the suffix gcd. Then update the suffix gcd
        if (i == n-2) {
            ans = __lcm(x[i], curgcd);
        } else {
            ans = __gcd(ans, __lcm(x[i], curgcd));
        }
        curgcd = __gcd(curgcd, x[i]);
    }
    
    //Print the total gcd
    cout << ans << endl;
    
    return;
}

int main()
{
    //mt19937 rng(0);
    
    //Fast IO
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    
    /*
    freopen("sabotage.in", "r", stdin);
    freopen("sabotage.out", "w", stdout);
    */
    
    ll t = 1;
    //cin >> t;

    ll co = 1;
    while (t--) {
        solve(co);
        ++co;
    }
}
