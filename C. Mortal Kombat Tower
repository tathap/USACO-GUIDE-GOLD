C. Mortal Kombat Tower
Educational Codeforces Round 95 (Rated for Div. 2)

Code:
//#include <bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp>
//using namespace __gnu_pbds;
#include <iostream>
#include <fstream>
#include <algorithm>
#include <vector>
#include <stack>
#include <queue>
#include <math.h>
#include <set>
#include <map>
#include <string>
#include <tuple>
#include <numeric>
#include <climits>
#include <bitset>
#include <iomanip>
#include <random>
#include <ctime>

using namespace std;

//change the long long to int if you need to save memory/time really badly
typedef long long ll;

//Comment this define when working on interactive problems
#define endl "\n"
#define sqrt(n) sqrt((long double) n)

const ll MAXN = 5e5 + 5;
const ll ZER = 0;
const ll ONE = 1;
const ll INF = LLONG_MAX;
const ll MOD = 998244353;

ll min(ll a, ll b) {
    if (a < b) {
        return a;
    } else {
        return b;
    }
}
 
ll max(ll a, ll b) {
    if (a > b) {
        return a;
    } else {
        return b;
    }
}

ll mod(ll num) {
    return (num >= MOD ? num % MOD : num);
}

ll __gcd(ll a, ll b) {
    if (b == 0) {
        return a;
    }
    
    if (a == 0) {
        return b;
    }
    
    if (a < b) {
        swap(a, b);
    }
    
    return __gcd(b, a % b);
}

ll __lcm(ll a, ll b) {
    ll prod = a*b;
    return prod/__gcd(a, b);
}

ll powmod(ll a, ll b){
    a %= MOD;
    if (a == 0) return 0;
    ll product = 1;
    while(b > 0){
        if (b&1){    // you can also use b % 2 == 1
            product *= a;
            product %= MOD;
            --b;
        }
        a *= a;
        a %= MOD;
        b /= 2;    // you can also use b >> 1
    }
    return product;
}


//calculates the inverse of a number mod MOD
ll inv(ll a) {
    return powmod(a, MOD - 2);
}

//1-indexed
//Implementation Trick: If the friend has to kill monster i, he'll require a[i] skip points to kill the monster.
void solve(ll ca)
{
    ll n; cin >> n;
    ll a[n+1];
    for (ll i = 1; i <= n; i++) {
        cin >> a[i];
    }
    
    ll dp[n+1][2]; //dp[i][j] is the cheapest cost to kill the first i bosses assuming it's person j's turn.
    
    //Fill out the base cases for the first 2 indexes.
    //dp[1][0] = a[1] b/c only the friend can kill the first monster.
    //dp[1][1] = a large number b/c it's impossible for you to kill the first monster
    
    //dp[2][0] = a[1] + a[2] b/c the only way for the friend to kill the second monster is if he also killed the first monster
    //dp[2][1] = a[1] b/c the friend would still have had to kill the first monster
    dp[1][0] = a[1]; dp[2][0] = a[1]+a[2];
    dp[1][1] = 10000000; dp[2][1] = a[1];
    
    for (ll i = 3; i <= n; i++) {
        //To compute the cost if your friend kills the current monster, check the case where your turn ended at the previous monster or the monster before that and pick the best cost
        dp[i][0] = min(dp[i-1][1], dp[i-2][1] + a[i-1]) + a[i];
        //To compute the cost if you kill the current monster, check the case where your friend's turn ended at the previous monster or the monster before that and pick the best cost
        dp[i][1] = min(dp[i-1][0], dp[i-2][0]);
    }
    
    //Print the cheapest cost whether you or your friend ends the game
    cout << min(dp[n][0], dp[n][1]) << endl;
    
    return;
}

int main()
{
    //mt19937 rng(0);
    
    //Fast IO
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    
    /*
    freopen("sabotage.in", "r", stdin);
    freopen("saboage.out", "w", stdout);
    */
    
    ll t = 1;
    cin >> t;

    ll co = 1;
    while (t--) {
        solve(co);
        ++co;
    }
}

//Always write your algorithm down on a piece of paper and question EACH and EVERY step if you aren't able to find an implementation mistake in your code.
