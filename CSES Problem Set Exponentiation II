CSES Problem Set
Exponentiation II

Code:
//#include <bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp>
//using namespace __gnu_pbds;
#include <iostream>
#include <fstream>
#include <algorithm>
#include <vector>
#include <stack>
#include <queue>
#include <math.h>
#include <set>
#include <map>
#include <string>
#include <tuple>
#include <numeric>
#include <climits>
#include <bitset>
#include <iomanip>
#include <random>
#include <ctime>

using namespace std;

typedef long long ll;

ll MOD = 1e9 + 5;
/*
ll powmod(ll a, ll b){
    a %= MOD;
    if (a == 0 && b == 0) return 1;
    if (a == 0) return 0;
    ll product = 1;
    while(b > 0){
        if (b&1){    // you can also use b % 2 == 1
            product *= a;
            product %= MOD;
            --b;
        }
        a *= a;
        a %= MOD;
        b /= 2;    // you can also use b >> 1
    }
    return product;
}
*/
ll powmod(ll a, ll b) {
    a %= MOD;
    if (a == 0 && b == 0) {
        return 1;
    }
    if (a == 0) {
        return 0;
    }
    if (b == 0) {
        return 1;
    }
    
    ll ret;
    if (b%2 == 1) {
        ret = (a%MOD * powmod(a, b-1)%MOD)%MOD;
    } else {
        ret = powmod(a, b/2)%MOD;
        ret = (ret%MOD * ret%MOD)%MOD;
    }

    return ret;
}

//Algorithm: By Fermat, we know that a^(p-1) is congruent to 1 modulo p. So a^b^c mod 1e9+7 is congruent to a^(b^c mod 1e9+6) mod 1e9+7
void solve(int ca)
{
    MOD = 1e9 + 6;
    
    ll a, b, c;
    cin >> a >> b >> c;
    ll newpow = powmod(b, c);
    
    MOD = 1e9 + 7;
    
    cout << powmod(a, newpow) << endl;
    
    return;
}

int main()
{
    //mt19937 rng(0);
    
    //Fast IO
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    
    /*
    freopen("sabotage.in", "r", stdin);
    freopen("sabotage.out", "w", stdout);
    */

    int t = 1;
    cin >> t;

    int co = 1;
    while (t--) {
        solve(co);
        ++co;
    }
}
