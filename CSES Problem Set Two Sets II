CSES Problem Set
Two Sets II

Code:
//#include <bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp>
//using namespace __gnu_pbds;
#include <iostream>
#include <fstream>
#include <algorithm>
#include <vector>
#include <stack>
#include <queue>
#include <math.h>
#include <set>
#include <map>
#include <string>
#include <tuple>
#include <numeric>
#include <climits>
#include <bitset>
#include <iomanip>
#include <random>
#include <ctime>

using namespace std;

//change the long long to int if you need to save memory/time really badly
typedef long long ll;

//Comment this define when working on interactive problems
#define endl "\n"
#define sqrt(n) sqrt((long double) n)

const ll MAXN = 5e5 + 5;
const ll ZER = 0;
const ll ONE = 1;
const ll INF = LLONG_MAX;
const ll MOD = 1e9 + 7;

ll min(ll a, ll b) {
    if (a < b) {
        return a;
    } else {
        return b;
    }
}
 
ll max(ll a, ll b) {
    if (a > b) {
        return a;
    } else {
        return b;
    }
}

ll mod(ll num) {
    return (num >= MOD ? num % MOD : num);
}

ll __gcd(ll a, ll b) {
    if (b == 0) {
        return a;
    }
    
    if (a == 0) {
        return b;
    }
    
    if (a < b) {
        swap(a, b);
    }
    
    return __gcd(b, a % b);
}

ll __lcm(ll a, ll b) {
    ll prod = a*b;
    return prod/__gcd(a, b);
}

ll powmod(ll a, ll b){
    a %= MOD;
    if (a == 0) return 0;
    ll product = 1;
    while(b > 0){
        if (b&1){    // you can also use b % 2 == 1
            product *= a;
            product %= MOD;
            --b;
        }
        a *= a;
        a %= MOD;
        b /= 2;    // you can also use b >> 1
    }
    return product;
}


//calculates the inverse of a number mod MOD
ll inv(ll a) {
    return powmod(a, MOD - 2);
}

//Idea: Let's count the number of subsets with a sum of (1+2+3+...+n)/2. then the answer is just this number divided by 2. Since 1+2+3+...+n = n*(n+1)/2, half of that would be n*(n+1)/4

void solve(ll ca)
{
    ll n;
    cin >> n;
    
    //If n mod 4 is congruent to 1 or 2, it's impossible to make n*(n+1)/4 an integer
    if (n%4 == 1 || n%4 == 2) {
        cout << 0 << endl;
        return;
    }
    
    //goal sum of the subsets
    ll sum = n*(n+1)/4;
    
    ll dp[sum+1]; //#of ways to make a subset of sum i
    for (ll i = 0; i <= sum; i++) {
        dp[i] = 0;
    }
    dp[0] = 1; //1 way to make a subset of sum 0, do nothing
    
    //Iterate over the integers 1, 2, . . . , n to make sure they aren't repeated in a subset
    for (ll i = 1; i <= n; i++) {
        for (ll j = sum; j >= 0; j--) {
            //Try adding the current integer
            if (dp[j] != 0 && j+i <= sum) {
                dp[j+i] = (dp[j+i]%MOD + dp[j]%MOD)%MOD;
            }
        }
    }
    
    //Print the answer divided by 2
    ll ans = (dp[sum]%MOD * inv(2)%MOD)%MOD;
    cout << ans << endl;
    
    return;
}

int main()
{
    //mt19937 rng(0);
    
    //Fast IO
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    /*
    freopen("team.in", "r", stdin);
    freopen("team.out", "w", stdout);
    */
    ll t = 1;
    //cin >> t;

    ll co = 1;
    while (t--) {
        solve(co);
        ++co;
    }
}

//Always write your algorithm down on a piece of paper and question EACH and EVERY step if you aren't able to find an implementation mistake in your code.
