G. Moving to the Capital
Codeforces Round #693 (Div. 3)

Code:
//#include <bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp>
//using namespace __gnu_pbds;
#include <iostream>
#include <fstream>
#include <algorithm>
#include <vector>
#include <stack>
#include <queue>
#include <math.h>
#include <set>
#include <map>
#include <string>
#include <tuple>
#include <numeric>
#include <climits>
#include <bitset>
#include <iomanip>
#include <random>
#include <ctime>

using namespace std;

//change the long long to int if you need to save memory/time really badly
typedef long long ll;

//Comment this define when working on interactive problems
#define endl "\n"
#define sqrt(n) sqrt((long double) n)

const ll MAXN = 5e5 + 5;
const ll ZER = 0;
const ll ONE = 1;
const ll INF = LLONG_MAX;
const ll MOD = 998244353;

ll min(ll a, ll b) {
    if (a < b) {
        return a;
    } else {
        return b;
    }
}
 
ll max(ll a, ll b) {
    if (a > b) {
        return a;
    } else {
        return b;
    }
}

ll mod(ll num) {
    return (num >= MOD ? num % MOD : num);
}

ll __gcd(ll a, ll b) {
    if (b == 0) {
        return a;
    }
    
    if (a == 0) {
        return b;
    }
    
    if (a < b) {
        swap(a, b);
    }
    
    return __gcd(b, a % b);
}

ll __lcm(ll a, ll b) {
    ll prod = a*b;
    return prod/__gcd(a, b);
}

ll powmod(ll a, ll b){
    a %= MOD;
    if (a == 0) return 0;
    ll product = 1;
    while(b > 0){
        if (b&1){    // you can also use b % 2 == 1
            product *= a;
            product %= MOD;
            --b;
        }
        a *= a;
        a %= MOD;
        b /= 2;    // you can also use b >> 1
    }
    return product;
}


//calculates the inverse of a number mod MOD
ll inv(ll a) {
    return powmod(a, MOD - 2);
}



//Algorithm: Let's first compute the minimum distance from node 1 to each of the other nodes.
//This can be done with a BFS

//Observation: It's always optimal for a node to travel a bunch of type1 edges, before finishing it off with a type2 edge. If such an arrangement isn't possible, it's best to stick with your original distance.

//Algorithm: What we'll do is find all the type2 edges in the graph. We'll also sort these edges so that we iterate over the ones that are closer starting from node 0 before going to the ones farther away starting at node 0. In particular, all we need to store in each edge a -> b is a and dist[b]. This is b/c if any node can get to node a using only type1 operations, it's guaranteed to get to node b and therefore get to dist[b] from the capital

//Algorithm: Once we've sorted the type2 edges, we'll run a dfs from the starting node in the edge in a reversed graph. This will help us find all the nodes that can reach the starting node using only type1 edges; each of these nodes will be marked visited since they won't find a better answer from another type2 edge (since they've been sorted).

vector<ll> adj1[MAXN], adj2[MAXN]; //graph with directed edges, and graph with those edges reversed
ll dist[MAXN]; //the shortest distance from the capital to a node
bool visited[MAXN]; //if a node has been visited
ll ans[MAXN]; //closest distance each node can reach to the capital

//Update the answer for each node, mark them visited, and visit all other nodes using only type1 edges
void dfs(ll node, ll val) {
    ans[node] = min(ans[node], val);
    visited[node] = true;
    for (auto el: adj2[node]) {
        if (!visited[el] && dist[el] < dist[node]) {
            dfs(el, val);
        }
    }
}

void solve(ll ca)
{
    //Read in the input and initialize everything
    ll n, m;
    cin >> n >> m;
    
    for (ll i = 0; i < n; i++) {
        adj1[i].clear();
        adj2[i].clear();
        dist[i] = -1;
        visited[i] = false;
    }
    
    for (ll i = 0; i < m; i++) {
        ll u, v;
        cin >> u >> v;
        u--; v--;
        
        adj1[u].push_back(v);
        adj2[v].push_back(u);
    }
    
    //Run a BFS to compute the dist values for all the nodes
    queue<pair<ll, ll>> q;
    q.push({0, 0});
    
    while (!q.empty()) {
        pair<ll, ll> cur = q.front();
        q.pop();
        
        if (dist[cur.first] == -1) {
            dist[cur.first] = cur.second;
        } else {
            continue;
        }
                
        for (auto el: adj1[cur.first]) {
            q.push({el, cur.second+1});
        }
    }
    
    //We know that the best answer for each node should at least be the distance just by staying at the node
    for (ll i = 0; i < n; i++) {
        ans[i] = dist[i];
    }
    
    //Stores a list of the starting node and the ending distance from the capital for each type 2 edge.
    vector<pair<ll, ll>> ve;
    for (ll i = 0; i < n; i++) {
        for (auto el: adj1[i]) {
            if (dist[i] >= dist[el]) {
                ve.push_back({dist[el], i});
            }
        }
    }
    
    //Sort the type2 edges by the ending distance so that we iterate over the type2 edges that bring us closer starting from the capital
    sort(ve.begin(), ve.end());
    
    //Run a dfs from each of the type2 edges
    for (ll i = 0; i < ve.size(); i++) {
        dfs(ve[i].second, ve[i].first);
    }
    
    //Print the answer
    for (ll i = 0; i < n; i++) {
        cout << ans[i] << " ";
    }
    cout << endl;
    
    return;
}

int main()
{
    //mt19937 rng(0);
    
    //Fast IO
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    /*
    freopen("snakes.in", "r", stdin);
    freopen("snakes.out", "w", stdout);
    */
    ll t = 1;
    cin >> t;

    ll co = 1;
    while (t--) {
        solve(co);
        ++co;
    }
}

//Always write your algorithm down on a piece of paper and question EACH and EVERY step if you aren't able to find an implementation mistake in your code.
