CSES Problem Set
Grid Paths
Dynamic Programming

Code:
#include <iostream>
#include <fstream>
#include <algorithm>
#include <vector>
#include <stack>
#include <queue>
#include <math.h>
#include <set>
#include <map>
#include <string>
#include <tuple>
#include <numeric>
#include <climits>
#include <bitset>
#include <iomanip>
#include <random>
#include <ctime>
using namespace std;

typedef long long ll;

const ll MOD = 1e9 + 7;
const ll MAXN = 1e6 + 1;

ll fact[MAXN];
void precompute()
{
   fact[0] = 1;
   for (ll i = 1; i < MAXN; i++) {
       fact[i] = (i * fact[i - 1]) % MOD;
   }
}

ll powmod(ll a, ll b){
    a %= MOD;
    if (a == 0) return 0;
    ll product = 1;
    while(b > 0){
        if (b&1){    // you can also use b % 2 == 1
            product *= a;
            product %= MOD;
            --b;
        }
        a *= a;
        a %= MOD;
        b /= 2;    // you can also use b >> 1
    }
    return product;
}

ll max(ll a, ll b) {
    if (a > b) {
        return a;
    } else {
        return b;
    }
}

ll min(ll a, ll b) {
    if (a < b) {
        return a;
    } else {
        return b;
    }
}


//calculates the inverse of a number mod MOD
ll inv(ll a) {
    return powmod(a, MOD - 2);
}

void solve(ll ca) {
    ll n;
    cin >> n;
    
    char grid[n][n];
    for (ll i = 0; i < n; i++) {
        for (ll j = 0; j < n; j++) {
            cin >> grid[i][j];
        }
    }
    
    ll dp[n+1][n+1]; //dp[i][j] is the #of ways to get from [1, 1] to [i, j]
    for (ll i = 0; i <= n; i++) {
        for (ll j = 0; j <= n; j++) {
            dp[i][j] = 0;
        }
    }
    //Base Case
    if (grid[0][0] == '*') {
        dp[1][1] = 0;
    } else {
        dp[1][1] = 1;
    }
    for (ll i = 1; i <= n; i++) {
        for (ll j = 1; j <= n; j++) {
            if (i == 1 && j == 1) {
                continue;
            }
            
            dp[i][j] = (dp[i-1][j]%MOD + dp[i][j-1]%MOD)%MOD;
            //If current grid is a trap, we can't move there
            if (grid[i-1][j-1] == '*') {
                dp[i][j] = 0;
            }
        }
    }
    
    cout << dp[n][n] << endl;
}

int main() {
    mt19937 rng(0);
    // Fast IO
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    /*
    freopen("exercise.in", "r", stdin);
    freopen("exercise.out", "w", stdout);
*/
    ll t = 1;
    //cin >> t;
    
    ll co = 0;
    while (t--) {
        solve(co);
        co++;
    }
}
