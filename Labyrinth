Labyrinth
CSES Graph Algorithms

Code:
#include <iostream>
#include <fstream>
#include <algorithm>
#include <vector>
#include <stack>
#include <queue>
#include <math.h>
#include <set>
#include <map>
#include <string>
#include <tuple>
#include <numeric>
#include <climits>
#include <bitset>
#include <iomanip>
#include <random>
#include <ctime>
using namespace std;

typedef long long ll;

ll max(ll a, ll b) {
    if (a > b) {
        return a;
    } else {
        return b;
    }
}

ll min(ll a, ll b) {
    if (a < b) {
        return a;
    } else {
        return b;
    }
}

const ll MAXN = 1e5 + 1;
const ll MAXM = 2097153;
const ll MOD = 1e9 + 7;
const ll INF = 1e7;

//Run BFS while also storing for each cell the direction u came into it from the previous cell
void solve(ll ca) {
    ll n, m;
    cin >> n >> m;
    
    char grid[n][m];
    
    pair<ll, ll> startc, endc;
    
    for (ll i = 0; i < n; i++) {
        for (ll j = 0; j < m; j++) {
            cin >> grid[i][j];
            if (grid[i][j] == 'A') {
                startc = {i, j};
            } else if (grid[i][j] == 'B') {
                endc = {i, j};
            }
        }
    }
    
    //For cell [i][j], stores the direction you went into it from the previous cell in the shortest path
    ll par[n][m];
    for (ll i = 0; i < n; i++) {
        for (ll j = 0; j < m; j++) {
            par[i][j] = -1;
        }
    }
    
    queue<pair<ll, ll>> q;
    q.push(startc);
    
    char dir[4] = {'D', 'R', 'U', 'L'};
    ll dr[4] = {1, 0, -1, 0};
    ll dc[4] = {0, 1, 0, -1};
    
    while (!q.empty()) {
        pair<ll, ll> cur = q.front();
        q.pop();
        
        for (ll k = 0; k < 4; k++) {
            ll nr = cur.first + dr[k];
            ll nc = cur.second + dc[k];
            
            if (nr >= 0 && nr < n && nc >= 0 && nc < m && par[nr][nc] == -1 && grid[nr][nc] != '#') {
                par[nr][nc] = k;
                q.push({nr, nc});
            }
        }
    }
    
    if (par[endc.first][endc.second] == -1) {
        cout << "NO" << endl;
        return;
    }
    
    cout << "YES" << endl;
    
    //Use par to compute the directions by undoing operations
    vector<char> directions;
    pair<ll, ll> cur = endc;
    while (cur != startc) {
        directions.push_back(dir[par[cur.first][cur.second]]);
        pair<ll, ll> newcur;
        newcur.first = cur.first - dr[par[cur.first][cur.second]];
        newcur.second = cur.second - dc[par[cur.first][cur.second]];
        cur = newcur;
    }
    
    reverse(directions.begin(), directions.end());
    cout << directions.size() << endl;
    for (auto el: directions) {
        cout << el;
    }
    cout << endl;
}

int main() {
    mt19937 rng(0);
    // Fast IO
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
  /*
    freopen("nocross.in", "r", stdin);
    freopen("nocross.out", "w", stdout);
*/
    ll t = 1;
    //cin >> t;
    
    ll co = 0;
    while (t--) {
        solve(co);
        co++;
    }
}
