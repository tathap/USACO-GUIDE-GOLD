Message Route
Graph Algorithms

Code:
#include <iostream>
#include <fstream>
#include <algorithm>
#include <vector>
#include <stack>
#include <queue>
#include <math.h>
#include <set>
#include <map>
#include <string>
#include <tuple>
#include <numeric>
#include <climits>
#include <bitset>
#include <iomanip>
#include <random>
#include <ctime>
using namespace std;

typedef long long ll;

ll max(ll a, ll b) {
    if (a > b) {
        return a;
    } else {
        return b;
    }
}

ll min(ll a, ll b) {
    if (a < b) {
        return a;
    } else {
        return b;
    }
}

const ll MAXN = 1e5 + 1;
const ll MAXM = 2097153;
const ll MOD = 1e9 + 7;
const ll INF = 1e7;

void solve(ll ca) {
    ll n, m;
    cin >> n >> m;
    
    vector<ll> adj[n];
    for (ll i = 0; i < m; i++) {
        ll a, b;
        cin >> a >> b;
        a--; b--;
        adj[a].push_back(b);
        adj[b].push_back(a);
    }
    
    //par[i] stores the node from which we traveled to node i from on the shortest path to node i from node 0
    ll par[MAXN];
    for (ll i = 0; i < n; i++) {
        par[i] = INF;
    }
    par[0] = -1;
    
    //Run a BFS while updaint par
    queue<ll> q;
    q.push(0);
    
    while (!q.empty()) {
        ll cur = q.front();
        q.pop();
        
        for (auto el: adj[cur]) {
            if (par[el] == INF) {
                par[el] = cur;
                q.push(el);
            }
        }
    }
    
    //If the last node wasn't accessed, it's impossible to go there
    if (par[n-1] == INF) {
        cout << "IMPOSSIBLE" << endl;
        return;
    }
    
    //Otherwise we'll use par to get the shortest path of computers and print them in order
    vector<ll> computers;
    ll cur = n-1;
    while (cur != 0) {
        computers.push_back(cur);
        cur = par[cur];
    }
    computers.push_back(0);
    
    reverse(computers.begin(), computers.end());
    
    cout << computers.size() << endl;
    for (auto el: computers) {
        cout << el+1 << " ";
    }
    cout << endl;
}

int main() {
    mt19937 rng(0);
    // Fast IO
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
  /*
    freopen("nocross.in", "r", stdin);
    freopen("nocross.out", "w", stdout);
*/
    ll t = 1;
    //cin >> t;
    
    ll co = 0;
    while (t--) {
        solve(co);
        co++;
    }
}
