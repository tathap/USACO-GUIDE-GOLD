Montmort Number
https://judge.yosupo.jp/problem/montmort_number_mod

Code:
//#include <bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp>
//using namespace __gnu_pbds;
#include <iostream>
#include <fstream>
#include <algorithm>
#include <vector>
#include <stack>
#include <queue>
#include <math.h>
#include <set>
#include <map>
#include <string>
#include <tuple>
#include <numeric>
#include <climits>
#include <bitset>
#include <iomanip>
#include <random>
#include <ctime>

using namespace std;

typedef long long ll;

ll MOD = 1e9 + 7;
const ll MAXN = 1e6 + 1;

ll powmod(ll a, ll b) {
    a %= MOD;
    if (a == 0 && b == 0) {
        return 1;
    }
    if (a == 0) {
        return 0;
    }
    if (b == 0) {
        return 1;
    }
    
    ll ret;
    if (b%2 == 1) {
        ret = (a%MOD * powmod(a, b-1)%MOD)%MOD;
    } else {
        ret = powmod(a, b/2)%MOD;
        ret = (ret%MOD * ret%MOD)%MOD;
    }

    return ret;
}

ll fact[MAXN];
void precompute()
{
    fact[0] = 1;
    for (ll i = 1; i < MAXN; i++) {
        fact[i] = (i * fact[i - 1]) % MOD;
    }
}

ll inv(ll num) {
    return powmod(num, MOD-2);
}

ll nCk(ll n, ll k) {
    return ((fact[n]*inv(fact[k])%MOD)*inv(fact[n-k]))%MOD;
}

//Precompute factorials and then compute the combinations quickly
void solve(ll ca)
{
    ll n; cin >> n >> MOD;
    
    //let dp[i] be the #of derangements of i objects.
    //Explanation of transitions: Let's say that we assign some other object at position i. There are n-1 choices for us to pick an object. Let's say that we pick object k != i to go to position i. Then where will object i go? If it goes to position k, then we're left with i-2 objects and i-2 positions, so that's just dp[i-2]. But if object i doesn't go to position k, then we're left with i-1 objects and i-1 positions, so that's just dp[i-1]. Thus the transition is dp[i] = (i-1)*(dp[i-1]+dp[i-2]). Base cases are dp[1] = 0 and dp[2] = 1
    ll dp[n+5];
    dp[1] = 0;
    dp[2] = 1;
    
    for (ll i = 3; i <= n; i++) {
        dp[i] = ((i%MOD + MOD -1)%MOD * (dp[i-1]%MOD + dp[i-2]%MOD)%MOD)%MOD;
    }
    
    for (ll i = 1; i <= n; i++) {
        cout << dp[i] << " ";
    }
    cout << endl;
    
    
    return;
}

int main()
{
    //mt19937 rng(0);
    
    //Fast IO
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    
    /*
    freopen("sabotage.in", "r", stdin);
    freopen("sabotage.out", "w", stdout);
    */

    precompute();
    
    ll t = 1;
    //cin >> t;

    ll co = 1;
    while (t--) {
        solve(co);
        ++co;
    }
}
