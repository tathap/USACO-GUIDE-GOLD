USACO 2015 December Contest, Gold
Problem 2. Fruit Feast

Code:
//#include <bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp>
//using namespace __gnu_pbds;
#include <iostream>
#include <fstream>
#include <algorithm>
#include <vector>
#include <stack>
#include <queue>
#include <math.h>
#include <set>
#include <map>
#include <string>
#include <tuple>
#include <numeric>
#include <climits>
#include <bitset>
#include <iomanip>
#include <random>
#include <ctime>

using namespace std;

//change the long long to int if you need to save memory/time really badly
typedef long long ll;

//Comment this define when working on interactive problems
#define endl "\n"
#define sqrt(n) sqrt((long double) n)

const ll MAXN = 2e5 + 5;
const ll ZER = 0;
const ll ONE = 1;
const ll INF = LLONG_MAX;
const ll MOD = 1e9 + 7;

ll min(ll a, ll b) {
    if (a < b) {
        return a;
    } else {
        return b;
    }
}
 
ll max(ll a, ll b) {
    if (a > b) {
        return a;
    } else {
        return b;
    }
}

ll mod(ll num) {
    return (num >= MOD ? num % MOD : num);
}

ll __gcd(ll a, ll b) {
    if (b == 0) {
        return a;
    }
    
    if (a == 0) {
        return b;
    }
    
    if (a < b) {
        swap(a, b);
    }
    
    return __gcd(b, a % b);
}

ll __lcm(ll a, ll b) {
    ll prod = a*b;
    return prod/__gcd(a, b);
}

ll powmod(ll a, ll b){
    a %= MOD;
    if (a == 0) return 0;
    ll product = 1;
    while(b > 0){
        if (b&1){    // you can also use b % 2 == 1
            product *= a;
            product %= MOD;
            --b;
        }
        a *= a;
        a %= MOD;
        b /= 2;    // you can also use b >> 1
    }
    return product;
}


//calculates the inverse of a number mod MOD
ll inv(ll a) {
    return powmod(a, MOD - 2);
}

void solve(ll ca)
{
    ll t, a, b;
    cin >> t >> a >> b;
    
    bool dp[t+1]; //dp[i] is true if it's possible to make a sum of i
    dp[0] = true;
    
    for (ll i = 1; i <= t; i++) {
        dp[i] = false;
        if (i-a >= 0 && dp[i-a]) {
            dp[i] = true;
        }
        if (i-b >= 0 && dp[i-b]) {
            dp[i] = true;
        }
    }
    
    //List of all sums that can be made
    vector<ll> v;
    for (ll i = 0; i <= t; i++) {
        if (dp[i]) {
            v.push_back(i);
        }
    }
    
    ll ans = 0; //Largest sum we can make with or without drinking water
    for (auto el: v) {
        //For each sum we can make, drink water, and then use binary search to find the largest achievable sum we can add onto it while staying <= t
        ll newval = el/2;
        ll ind = upper_bound(v.begin(), v.end(), t-newval) - v.begin();
        ind--;
        
        ans = max(ans, newval + v[ind]);
    }
    
    //In addition, we need the best answer without drinking water
    for (ll i = 0; i <= t; i++) {
        if (dp[i]) {
            ans = max(ans, i);
        }
    }
    
    cout << ans << endl;
    
    return;
}

int main()
{
    //mt19937 rng(0);
    
    //Fast IO
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    
    freopen("feast.in", "r", stdin);
    freopen("feast.out", "w", stdout);
    
    ll t = 1;
    //cin >> t;

    ll co = 1;
    while (t--) {
        solve(co);
        ++co;
    }
}

//Always write your algorithm down on a piece of paper and question EACH and EVERY step if you aren't able to find an implementation mistake in your code.
