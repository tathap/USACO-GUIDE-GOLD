USACO 2016 December Contest, Gold
Problem 3. Lasers and Mirrors

Code:
#include <iostream>
#include <fstream>
#include <algorithm>
#include <vector>
#include <stack>
#include <queue>
#include <math.h>
#include <set>
#include <map>
#include <string>
#include <tuple>
#include <numeric>
#include <climits>
#include <bitset>
#include <iomanip>
#include <random>
#include <ctime>
using namespace std;

typedef long long ll;

const ll INF = 1e7;
const ll MOD = 1e9 + 7;
const ll MAXN = 1e6 + 1;

ll fact[MAXN];
void precompute()
{
   fact[0] = 1;
   for (ll i = 1; i < MAXN; i++) {
       fact[i] = (i * fact[i - 1]) % MOD;
   }
}

ll powmod(ll a, ll b){
    a %= MOD;
    if (a == 0) return 0;
    ll product = 1;
    while(b > 0){
        if (b&1){    // you can also use b % 2 == 1
            product *= a;
            product %= MOD;
            --b;
        }
        a *= a;
        a %= MOD;
        b /= 2;    // you can also use b >> 1
    }
    return product;
}

ll max(ll a, ll b) {
    if (a > b) {
        return a;
    } else {
        return b;
    }
}

ll min(ll a, ll b) {
    if (a < b) {
        return a;
    } else {
        return b;
    }
}


//calculates the inverse of a number mod MOD
ll inv(ll a) {
    return powmod(a, MOD - 2);
}

//Our state consists of the current location, the current cheapest cost, and the current direction we're going in
struct State{
    ll x, y, cos, dir;
};

void solve(ll ca) {
    //Read in the input
    ll n, xl, yl, xb, yb;
    cin >> n >> xl >> yl >> xb >> yb;
    
    //Will store all the important points: the locations of the fenceposts, laser, and barn.
    pair<ll, ll> fence[n+2];
    for (ll i = 0; i < n; i++) {
        cin >> fence[i].first >> fence[i].second;
    }
    fence[n] = {xl, yl};
    fence[n+1] = {xb, yb};
    
    //ma[0] gives you the point immediately on top of a point if it exists. ma[1] gives you the point immediately below a point if it exists
    //ma[2] gives you the point immediately to the right of a point if it exists . ma[3] gives you the point immediately to the left of a point if it exists.
    map<pair<ll, ll>, pair<ll, ll>> ma[4];

    //sort the fences by increasing x-coordinate, and then by increasing y-coordinate
    sort(fence, fence+n+2);
    
    //Compute ma[0] and ma[1]
    ll i = 0;
    while (i < n+2) {
        ll cur = i+1;
        while (cur < n+2 && fence[cur].first == fence[i].first) {
            ma[0][{fence[cur-1].first, fence[cur-1].second}] = {fence[cur].first, fence[cur].second};
            ma[1][{fence[cur].first, fence[cur].second}] = {fence[cur-1].first, fence[cur-1].second};
            cur++;
        }
        i = cur;
    }
    
    //Now swap the coordinates so that we can take advantage of c++ STL and sort by increasing y-coordinate and then by increasing x-coordinate
    for (ll i = 0; i < n+2; i++) {
        pair<ll, ll> tem = fence[i];
        tem = {tem.second, tem.first};
        fence[i] = tem;
    }
    
    //Sort by increasing y-coordinate and then by increasing x-coordinate
    sort(fence, fence+n+2);
    
    //Compute ma[2] and ma[3]
    i = 0;
    while (i < n+2) {
        ll cur = i+1;
        while (cur < n+2 && fence[cur].first == fence[i].first) {
            ma[2][{fence[cur-1].second, fence[cur-1].first}] = {fence[cur].second, fence[cur].first};
            ma[3][{fence[cur].second, fence[cur].first}] = {fence[cur-1].second, fence[cur-1].first};
            cur++;
        }
        i = cur;
    }
    
    map<pair<ll, ll>, ll> memo[4]; //memo[i][{a, b}] tells us the fewest #of mirrors to go from the starting laster to fence (a, b) ending at direction i
    
    //Multi-Source BFS by choosing all 4 initial directions from the laser
    queue<State> q;
    q.push({xl, yl, 0, 0}); //0 means going up
    q.push({xl, yl, 0, 1}); //1 means going down
    q.push({xl, yl, 0, 2}); //2 means going to the right
    q.push({xl, yl, 0, 3}); //3 means going to the left
    
    //Run BFS
    while (!q.empty()) {
        State cur = q.front();
        q.pop();
        
        //If we got here more cheaply than before or if we have come to a new state, keep going
        if (memo[cur.dir].find({cur.x, cur.y}) == memo[cur.dir].end()) {
            memo[cur.dir][{cur.x, cur.y}] = cur.cos;
        } else if (memo[cur.dir][{cur.x, cur.y}] > cur.cos){
            memo[cur.dir][{cur.x, cur.y}] = cur.cos;
        } else {
            continue;
        }
        
        //Do nothing and move on to the next important point in the same direction without using a mirror
        if (ma[cur.dir].find({cur.x, cur.y}) == ma[cur.dir].end()) {
            
        } else {
            q.push({ma[cur.dir][{cur.x, cur.y}].first, ma[cur.dir][{cur.x, cur.y}].second, cur.cos, cur.dir});
        }
        
        //Use a mirror. Note that you're only allowed to go in a perpendicular direction
        for (ll k = 0; k < 4; k++) {
            if (cur.dir == 0 || cur.dir == 1) {
                if (k == 0 || k == 1) {
                    continue;
                }
            }
            
            if (cur.dir == 2 || cur.dir == 3) {
                if (k == 2 || k == 3) {
                    continue;
                }
            }
            
            if (ma[k].find({cur.x, cur.y}) == ma[k].end()) {
                continue;
            } else {
                q.push({ma[k][{cur.x, cur.y}].first, ma[k][{cur.x, cur.y}].second, cur.cos+1, k});
            }
        }
    }
    
    //Choose the cheapest answer among all 4 final directions ending at the barn, or -1 if no such way exists
    ll ans = INF;
    for (ll k = 0; k < 4; k++) {
        if (memo[k].find({xb, yb}) == memo[k].end()) {
            //
        } else {
            ans = min(ans, memo[k][{xb, yb}]);
        }
    }
    
    if (ans == INF) {
        cout << -1 << endl;
    } else {
        cout << ans << endl;
    }
}

int main() {
    mt19937 rng(0);
    // Fast IO
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    
    freopen("lasers.in", "r", stdin);
    freopen("lasers.out", "w", stdout);
    
    ll t = 1;
    //cin >> t;
    
    ll co = 0;
    while (t--) {
        solve(co);
        co++;
    }
}
