USACO 2016 December Contest, Platinum
Problem 2. Team Building

Code:
//#include <bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp>
//using namespace __gnu_pbds;
#include <iostream>
#include <fstream>
#include <algorithm>
#include <vector>
#include <stack>
#include <queue>
#include <math.h>
#include <set>
#include <map>
#include <string>
#include <tuple>
#include <numeric>
#include <climits>
#include <bitset>
#include <iomanip>
#include <random>
#include <ctime>

using namespace std;

//change the long long to int if you need to save memory/time really badly
typedef long long ll;

//Comment this define when working on interactive problems
#define endl "\n"
#define sqrt(n) sqrt((long double) n)

const ll MAXN = 5e5 + 5;
const ll ZER = 0;
const ll ONE = 1;
const ll INF = LLONG_MAX;
const ll MOD = 1e9 + 9;

ll min(ll a, ll b) {
    if (a < b) {
        return a;
    } else {
        return b;
    }
}
 
ll max(ll a, ll b) {
    if (a > b) {
        return a;
    } else {
        return b;
    }
}

ll mod(ll num) {
    return (num >= MOD ? num % MOD : num);
}

ll __gcd(ll a, ll b) {
    if (b == 0) {
        return a;
    }
    
    if (a == 0) {
        return b;
    }
    
    if (a < b) {
        swap(a, b);
    }
    
    return __gcd(b, a % b);
}

ll __lcm(ll a, ll b) {
    ll prod = a*b;
    return prod/__gcd(a, b);
}

ll powmod(ll a, ll b){
    a %= MOD;
    if (a == 0) return 0;
    ll product = 1;
    while(b > 0){
        if (b&1){    // you can also use b % 2 == 1
            product *= a;
            product %= MOD;
            --b;
        }
        a *= a;
        a %= MOD;
        b /= 2;    // you can also use b >> 1
    }
    return product;
}


//calculates the inverse of a number mod MOD
ll inv(ll a) {
    return powmod(a, MOD - 2);
}

//Algorithm: Notice that all that really matters is the cow with the largest skill on FJ's team, the cow with the largest skill on FP's team, and the size of the teams. We'll iterate on the size of the teams that FJ and FP will each bring. For each size from size 1 to k, we'll iterate over the highest skilled cow on FJ's and on FP's teams respectively, and use prefix sums to compute all the possible groups of size k-1 that both FJ and FP could have brought to keep victory in the hands of FJ
void solve(ll ca)
{
    ll n, m, k;
    cin >> n >> m >> k;
    
    ll fj[n];
    for (ll i = 0; i < n; i++) {
        cin >> fj[i];
    }
    
    ll fp[m];
    for (ll i = 0; i < m; i++) {
        cin >> fp[i];
    }
    
    //Sort the cows by their scores.
    sort(fj, fj+n);
    sort(fp, fp+m);
    
    ll ps[n+1][m+1]; //ps[i][j] will store the sum of the amount of teams of the current size such that cow a is the largest cow in FJ's team and cow b is the largest cow in FP's team for all a <= i and b <= j
    
    //We will use rolling arrays to update ps after each iteration of the size of the teams
    for (ll ti = 0; ti < k; ti++) {
        //Rolling Arrays
        ll ps2[n+1][m+1];
        for (ll i = 0; i <= n; i++) {
            for (ll j = 0; j <= m; j++) {
                ps2[i][j] = 0;
            }
        }
        for (ll i = 1; i <= n; i++) {
            for (ll j = 1; j <= m; j++) {
                //If FJ wins using cow i against FP's cow j, then consider (i, j)
                if (fj[i-1] > fp[j-1]) {
                    if (ti == 0) { //If the teams are of size 1, then the #of teams such that cow i is the largest cow on FJ's team and cow j is the largest cow on FP's team and cow i beats cow j is just 1.
                        ps2[i][j] = 1;
                    } else { //Otherwise, the number of teams such that cow i is the largest cow on FJ's team and cow j is the largest cow on FP's team and cow i beats cow j is just ps[i-1][j-1] (the #of teams of the previous size from the previous iteration with smaller cows)
                        ps2[i][j] = ps[i-1][j-1]%MOD;
                    }
                }
            }
        }
        //Rolling Arrays
        for (ll i = 0; i <= n; i++) {
            for (ll j = 0; j <= m; j++) {
                ps[i][j] = ps2[i][j]%MOD;
            }
        }
        
        //Recompute the prefix sums
        for (ll i = 1; i <= n; i++) {
            for (ll j = 1; j <= m; j++) {
                ps[i][j] = (ps[i][j]%MOD + ps[i-1][j]%MOD + ps[i][j-1]%MOD + MOD - ps[i-1][j-1])%MOD;
            }
        }
    }
    
    //The sum of all teams such that their size is k and FJ wins
    cout << ps[n][m] << endl;
    
    return;
}

int main()
{
    //mt19937 rng(0);
    
    //Fast IO
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    
    freopen("team.in", "r", stdin);
    freopen("team.out", "w", stdout);
    
    ll t = 1;
    //cin >> t;

    ll co = 1;
    while (t--) {
        solve(co);
        ++co;
    }
}

//Always write your algorithm down on a piece of paper and question EACH and EVERY step if you aren't able to find an implementation mistake in your code.
