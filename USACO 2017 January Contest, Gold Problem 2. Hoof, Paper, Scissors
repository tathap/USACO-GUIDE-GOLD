USACO 2017 January Contest, Gold
Problem 2. Hoof, Paper, Scissors

Code:
//#include <bits/stdc++.h>
//#include <ext/pb_ds/assoc_container.hpp>
//using namespace __gnu_pbds;
#include <iostream>
#include <fstream>
#include <algorithm>
#include <vector>
#include <stack>
#include <queue>
#include <math.h>
#include <set>
#include <map>
#include <string>
#include <tuple>
#include <numeric>
#include <climits>
#include <bitset>
#include <iomanip>
#include <random>
#include <ctime>

using namespace std;

//change the long long to int if you need to save memory/time really badly
typedef long long ll;

//Comment this define when working on interactive problems
#define endl "\n"
#define sqrt(n) sqrt((long double) n)

const ll MAXN = 5e5 + 5;
const ll ZER = 0;
const ll ONE = 1;
const ll INF = LLONG_MAX;
const ll MOD = 998244353;

ll min(ll a, ll b) {
    if (a < b) {
        return a;
    } else {
        return b;
    }
}
 
ll max(ll a, ll b) {
    if (a > b) {
        return a;
    } else {
        return b;
    }
}

ll mod(ll num) {
    return (num >= MOD ? num % MOD : num);
}

ll __gcd(ll a, ll b) {
    if (b == 0) {
        return a;
    }
    
    if (a == 0) {
        return b;
    }
    
    if (a < b) {
        swap(a, b);
    }
    
    return __gcd(b, a % b);
}

ll __lcm(ll a, ll b) {
    ll prod = a*b;
    return prod/__gcd(a, b);
}

ll powmod(ll a, ll b){
    a %= MOD;
    if (a == 0) return 0;
    ll product = 1;
    while(b > 0){
        if (b&1){    // you can also use b % 2 == 1
            product *= a;
            product %= MOD;
            --b;
        }
        a *= a;
        a %= MOD;
        b /= 2;    // you can also use b >> 1
    }
    return product;
}


//calculates the inverse of a number mod MOD
ll inv(ll a) {
    return powmod(a, MOD - 2);
}

void solve(ll ca)
{
    ll n, k;
    cin >> n >> k;
    
    ll dp[n+1][k+1][3]; //dp[i][j][c] is the maximum #of games Bessie wins considering the first i games and switching j times with current character c
    for (ll i = 0; i <= n; i++) {
        for (ll j = 0; j <= k; j++) {
            for (ll l = 0; l < 3; l++) {
                //Initialize everything to 0 since no one has won any games yet
                dp[i][j][l] = 0;
            }
        }
    }
    
    //Convert all the gestures from characters to indexes. H -> 0, P -> 1, S -> 2. We will stick to these conversions throughout the problem. We'll also be 1-indexing throughout the problem
    ll gestures[n+1];
    for (ll i = 1; i <= n; i++) {
        char c; cin >> c;
        if (c == 'H') {
            gestures[i] = 0;
        } else if (c == 'P') {
            gestures[i] = 1;
        } else {
            gestures[i] = 2;
        }
    }
    
    //Iterate over the dp states
    for (ll i = 1; i <= n; i++) {
        for (ll j = 0; j <= k; j++) {
            for (ll l = 0; l < 3; l++) {
                //win is true if we can beat FJ with our current character l and his gesture[i]
                bool win = false;
                if (l == 0 && gestures[i] == 2) {
                    win = true;
                } else if (l == 1 && gestures[i] == 0) {
                    win = true;
                } else if (l == 2 && gestures[i] == 1) {
                    win = true;
                }
                
                //don't switch from previous
                dp[i][j][l] = dp[i-1][j][l] + win; //If we win, add an extra value of 1
                
                //switch from previous
                if (j != 0) {
                    //Iterate over the character used in the pervious game and add the value of win.
                    for (ll l2 = 0; l2 < 3; l2++) {
                        dp[i][j][l] = max(dp[i][j][l], dp[i-1][j-1][l2] + win);
                    }
                }
            }
        }
    }
    
    //Since we will always win the most games by switching as much as possible, we only need to consider the 3 cases about which character we will play the last game with
    cout << max(dp[n][k][0], max(dp[n][k][1], dp[n][k][2])) << endl;
    
    return;
}

int main()
{
    //mt19937 rng(0);
    
    //Fast IO
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    
    
    freopen("hps.in", "r", stdin);
    freopen("hps.out", "w", stdout);
    
    
    ll t = 1;
    //cin >> t;

    ll co = 1;
    while (t--) {
        solve(co);
        ++co;
    }
}

//Always write your algorithm down on a piece of paper and question EACH and EVERY step if you aren't able to find an implementation mistake in your code.
